# Copyright 2005-2017 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# 
# In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
# virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
#

label "Parameter information";

#  Parameter category
codetable[1] parameterCategory ('4.1.[discipline:l].table',masterDir,localDir): dump;

#  Parameter number
codetable[1] parameterNumber ('4.2.[discipline:l].[parameterCategory:l].table',masterDir,localDir)  : dump;
meta parameterUnits codetable_units(parameterNumber) : dump;
meta parameterName  codetable_title(parameterNumber) : dump;

#  The input process identifier shall have the value of the 'analysis or forecast process identifier' of the
#  original GRIB message used as input of the post-processing
unsigned[2]  inputProcessIdentifier                      : dump,edition_specific;
#  The input originating centre shall have the value of the 'originating centre' of the original GRIB message
#  used as input of the post-processing
codetable[2] inputOriginatingCentre 'grib2/centre.table' : dump,edition_specific,string_type;
#  This identifies which post-processing technique was used. This is defined by the originating centre
unsigned[1]  typeOfPostProcessing                        : dump,edition_specific;

#  Type of generating process
codetable[1] typeOfGeneratingProcess ('4.3.table',masterDir,localDir)  : dump;

#  Background generating process identifier (defined by originating centre)
unsigned[1] backgroundProcess = 255 : edition_specific;
alias backgroundGeneratingProcessIdentifier=backgroundProcess;

#  Analysis or forecast generating processes identifier
# (defined by originating centre)
unsigned[1] generatingProcessIdentifier  : dump;

#  Hours of observational data cut-off after reference time
unsigned[2] hoursAfterDataCutoff = missing()  : edition_specific,can_be_missing;
alias hoursAfterReferenceTimeOfDataCutoff=hoursAfterDataCutoff;

#  Minutes of observational data cut-off after reference time
unsigned[1]  minutesAfterDataCutoff = missing() : edition_specific,can_be_missing;
alias minutesAfterReferenceTimeOfDataCutoff=minutesAfterDataCutoff;

#  Indicator of unit of time range
codetable[1] indicatorOfUnitOfTimeRange ('4.4.table',masterDir,localDir)  : dump;
codetable[1] stepUnits 'stepUnits.table' = 1 : transient,dump,no_copy;

#  Forecast time in units defined by indicatorOfUnitOfTimeRange
signed[4] forecastTime  : dump;
